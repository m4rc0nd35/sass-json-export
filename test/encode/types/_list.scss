@include describe('The _json-encode--list function') {
  @include it('should return a JSON like array string') {
    @include should(expect(_json-encode--list(1 2 3)), to(equal('[1, 2, 3]')));
    @include should(expect(_json-encode--list(a b c)), to(equal('["a", "b", "c"]')));
    @include should(expect(_json-encode--list(true false true)), to(equal('[true, false, true]')));
  }

  @include it('should encode sass datatypes to strings') {
    @include should(expect(_json-encode--list(#000 green blue)), to(equal('["#000", "green", "blue"]')));
  }

  @include it('should properly encode a list with commas to JSON') {
    @include should(expect(_json-encode--list((1, 2, 3))), to(equal('[1, 2, 3]')));
    @include should(expect(_json-encode--list((a, b, c))), to(equal('["a", "b", "c"]')));
    @include should(expect(_json-encode--list((true, false, true))), to(equal('[true, false, true]')));
    @include should(expect(_json-encode--list((#333, #444, #555))), to(equal('["#333", "#444", "#555"]')));
  }

  @include it('should properly encode nested lists to JSON') {
    @include should(expect(_json-encode--list((1 2 (3 4 5 (6 7) 8) 9))), to(equal('[1, 2, [3, 4, 5, [6, 7], 8], 9]')));
    @include should(expect(_json-encode--list((a b (c d e (f g) h) i))), to(equal('["a", "b", ["c", "d", "e", ["f", "g"], "h"], "i"]')));
    @include should(expect(_json-encode--list((true (false true (false true) true false)))), to(equal('[true, [false, true, [false, true], true, false]]')));
    @include should(expect(_json-encode--list((#333 (#444 #555 #666) (#555 (#444 #333))))), to(equal('["#333", ["#444", "#555", "#666"], ["#555", ["#444", "#333"]]]')));
  }
}
